name: Deploy to Amazon ECS

on:
  push:
    branches:
      - develop

env:
    AWS_REGION: us-east-1
    ECR_REPOSITORY: chainfluence-${{ github.ref_name }}-ecr-repository
    ECS_SERVICE: chainfluence-${{ github.ref_name }}--ecs-service
    ECS_CLUSTER: chainfluence-${{ github.ref_name }}--ecs-cluster
    ECS_TASK_DEFINITION: .aws/task-definition.${{ github.ref_name }}.json
    CONTAINER_NAME: chainfluence-${{ github.ref_name }}--container

defaults:
    run:
        shell: bash

jobs:
    deploy:
        name: Deploy
        environment: ${{ github.ref_name }}
        runs-on: ubuntu-latest
        permissions:
            packages: write
            contents: read

        steps:
            - name: Checkout
              uses: actions/checkout@v2
                    
            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1.5.1
        
            - name: Store ENV from AWS SecretManager
              uses: say8425/aws-secrets-manager-actions@v2
              with:
                  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  AWS_DEFAULT_REGION: ${{ env.AWS_REGION }}
                  SECRET_NAME: chainfluence-${{ github.ref_name }}--secrets
                  OUTPUT_PATH: .env
            

            - name: Build, tag, and push image to Amazon ECR
              id: build-image
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  IMAGE_TAG: ${{ github.sha }}
              run: |
                  # Build a docker container and
                  # push it to ECR so that it can
                  # be deployed to ECS.
                  docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                  echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
            - name: Fill in the new image ID in the Amazon ECS task definition
              id: task-def
              uses: aws-actions/amazon-ecs-render-task-definition@v1
              with:
                  task-definition: ${{ env.ECS_TASK_DEFINITION }}
                  container-name: ${{ env.CONTAINER_NAME }}
                  image: ${{ steps.build-image.outputs.image }}

            - name: Deploy Amazon ECS task definition
              uses: aws-actions/amazon-ecs-deploy-task-definition@v1.4.10
              with:
                  task-definition: ${{ steps.task-def.outputs.task-definition }}
                  service: ${{ env.ECS_SERVICE }}
                  cluster: ${{ env.ECS_CLUSTER }}
                  wait-for-service-stability: true
            - uses: actions/checkout@v3
